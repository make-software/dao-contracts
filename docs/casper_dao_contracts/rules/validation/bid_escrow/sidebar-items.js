window.SIDEBAR_ITEMS = {"struct":[["CanBeOnboarded","Verifies if the user can be onboarded. May return [Error::VaOnboardedAlready]."],["CanBidBeCancelled","Verifies if the `Bid` can be canceled. May return [Error::CannotCancelBidOnCompletedJobOffer] or [Error::CannotCancelBidBeforeAcceptanceTimeout]."],["CanBidOnAuctionState","Verifies if the worker can place a `Bid` in the given state. May return [Error::AuctionNotRunning], [Error::OnlyOnboardedWorkerCanBid] or [Error::OnboardedWorkerCannotBid]."],["CanBidOnOwnJob","Verifies if the worker attempts to bid on his own `Job`. May return [Error::CannotBidOnOwnJob],"],["CanJobOfferBeCancelled","Verifies if the `Job Offer` can be canceled in the given state. May return [Error::JobOfferCannotBeYetCanceled]."],["CanPickBid","Makes sure the job poster is the one who picks the `Bid`. May return [Error::OnlyJobPosterCanPickABid]."],["CanProgressJobOffer","Makes sure the job poster is the one who progresses the `Job`. May return [Error::OnlyJobPosterCanModifyJobOffer]."],["DoesProposedPaymentExceedBudget","Verifies if the proposed payment does not exceeds the budget. May return [Error::PaymentExceedsMaxBudget]."],["DoesProposedPaymentMatchTransferred","Verifies if the actual payment matches the proposed payment. May return [Error::PurseBalanceMismatch]."],["ExistsOngoingVoting","Verifies if exists conflicting ongoing voting. May return [Error::VotingNotCompleted]."],["HasPermissionsToCancelBid","Makes sure the bidder is the one who cancels the `Bid`. May return [Error::CannotCancelNotOwnedBid]."],["HasPermissionsToCancelJobOffer","Makes sure the job poster is the one who picks the `Job Offer`. May return [Error::OnlyJobPosterCanPickABid]."],["IsDosFeeEnough","Makes sure the `Job DOS Fee` is high enough. May return [Error::DosFeeTooLow]."],["IsGracePeriod","Makes sure the `Job` is in grace period state. May return [Error::CannotSubmitJobProof] or [Error::GracePeriodNotStarted]."],["IsNotVa","Verifies if the user is not onboarded. May return [Error::VaOnboardedAlready]."],["IsStakeNonZero","Makes sure the stake is non-zero. May return [Error::ZeroStake]."]]};